#
# calculate each team's average runs and runs allowed per game
Teams_sub$RPG <- Teams_sub$R / Teams_sub$G
Teams_sub$RAPG <- Teams_sub$RA / Teams_sub$G
#
# create new data frame with season totals for each league
LG_RPG <- aggregate(cbind(R, RA, G) ~ yearID + lgID, data = Teams_sub, sum)
# calculate league + season runs and runs allowed per game
LG_RPG$LG_RPG <- LG_RPG$R / LG_RPG$G
LG_RPG$LG_RAPG <- LG_RPG$RA / LG_RPG$G
#
# select a sub-set of teams from 1901 [the establishment of the American League] forward to 2012
# read the data into separate league tables
ALseason <- (subset (LG_RPG, yearID > 1900 & lgID == "AL"))
NLseason <- (subset (LG_RPG, yearID > 1900 & lgID == "NL"))
#
#
# Use dplyr (and the inner_join function) to create Teams.merge
Teams.merge <- inner_join(Teams_sub, LG_RPG, by = c("yearID", "lgID"))
head(Teams.merge)
tail(Teams.merge)
#
#
# +++++++++++++++++++++++++++++++++++++++++++++++++++
#
# RUNS SCORED PER GAME BY LEAGUE
# ==============================
#
# web references:
# http://princeofslides.blogspot.ca/2011/05/sab-r-metrics-basics-of-loess.html
# http://research.stowers-institute.org/efg/R/Statistics/loess.htm
#
# start with American League
# create new object ALRunScore.LO for loess model
ALRunScore.LO <- loess(ALseason$LG_RPG ~ ALseason$yearID)
ALRunScore.LO.predict <- predict(ALRunScore.LO)
#
# create new objects RunScore.Lo.XX for loess models with "span" control
ALRunScore.LO.25 <- loess(ALseason$LG_RPG ~ ALseason$yearID, span=0.25)
ALRunScore.LO.25.predict <- predict(ALRunScore.LO.25)
#
ALRunScore.LO.5 <- loess(ALseason$LG_RPG ~ ALseason$yearID, span=0.5)
ALRunScore.LO.5.predict <- predict(ALRunScore.LO.5)
#
# plot the data, add loess curve
ylim <- c(3,6)
plot(ALseason$LG_RPG ~ ALseason$yearID,
ylim = ylim,
main = "American League: runs per team per game, 1901-2012",
xlab = "year", ylab = "runs per game")
# loess predicted value line
lines(ALseason$yearID, ALRunScore.LO.predict, lty="solid", col="red", lwd=2)
lines(ALseason$yearID, ALRunScore.LO.25.predict, lty="dashed", col="blue", lwd=2)
lines(ALseason$yearID, ALRunScore.LO.5.predict, lty="dotdash", col="black", lwd=2)
legend(1980, 3.5,
c("default", "span=0.25", "span=0.50"),
lty=c("solid", "dashed", "dotdash"),
col=c("red", "blue", "black"),
lwd=c(2, 2, 2))
grid()
lastyear <- 2112
lastyear <- 2112
title <- paste("AL RPG 1901-", lastyear)
ggplot(ALseason, aes(x=yearID, y=LG_RPG)) +
geom_point() +
ggtitle(title)
lastyear <- 2011
ggplot(ALseason, aes(x=yearID, y=LG_RPG)) +
geom_point() +
ggtitle(paste("AL RPG 1901-", lastyear))
lastyear <- 2112
title <- paste("AL RPG 1901-", lastyear)
ggplot(ALseason, aes(x=yearID, y=LG_RPG)) +
geom_point() +
ggtitle(paste("AL RPG 1901-", lastyear))
ggplot(ALseason, aes(x=yearID, y=LG_RPG)) +
geom_point() +
ggtitle(paste("AL RPG 1901-", lastyear)) +
xlab("year") + ylab("runs per game")
ALRPG + stat_smooth(method=loess)
ALRPG <- ggplot(ALseason, aes(x=yearID, y=LG_RPG)) +
geom_point() +
ggtitle(paste("AL RPG 1901-", lastyear)) +
xlab("year") + ylab("runs per game")
ALRPG + stat_smooth(method=loess)
ALRPG + stat_smooth(method=loess, span=0.25)
ALRPG <- ggplot(ALseason, aes(x=yearID, y=LG_RPG)) +
geom_point() +
ggtitle(paste("AL RPG 1901-", lastyear)) +
xlab("year") + ylab("runs per game")
ALRPG
ALRPG + stat_smooth(method=loess, span=0.25)
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
ALRPG
#
ALRPG + stat_smooth(method=loess, span=0.25, level=0.5)
ALRPG + stat_smooth(method=loess, span=0.25, level=0.25)
ALRPG + stat_smooth(method=loess, span=0.25, level=0.95)
ALRPG + stat_smooth(method=loess, span=0.25, level=0.05)
ALRPG + stat_smooth(method=loess, span=0.25, level=0.95)
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny')
shiny::runApp('~/RStats/runscoring_shiny/runscoring')
library(dplyr)
library(ggplot2)
library(Lahman)
#
# load the Lahman data table "Teams"
data(Teams)
#
#
# CREATE LEAGUE SUMMARY TABLES
# ============================
#
# select a sub-set of teams from 1901 [the establishment of the American League] forward to 2012
Teams_sub <- as.data.frame(subset (Teams, yearID > 1900 & lgID != "FL"))
#
# calculate each team's average runs and runs allowed per game
Teams_sub$RPG <- Teams_sub$R / Teams_sub$G
Teams_sub$RAPG <- Teams_sub$RA / Teams_sub$G
#
# create new data frame with season totals for each league
LG_RPG <- aggregate(cbind(R, RA, G) ~ yearID + lgID, data = Teams_sub, sum)
# calculate league + season runs and runs allowed per game
LG_RPG$LG_RPG <- LG_RPG$R / LG_RPG$G
LG_RPG$LG_RAPG <- LG_RPG$RA / LG_RPG$G
LG_RPG <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(R, RA, G)
head(LG_RPG)
# select a sub-set of teams from 1901 [the establishment of the American League] forward to 2012
Teams_sub <- as.data.frame(subset (Teams, yearID > 1900 & lgID != "FL"))
#
# calculate each team's average runs and runs allowed per game
Teams_sub$RPG <- Teams_sub$R / Teams_sub$G
Teams_sub$RAPG <- Teams_sub$RA / Teams_sub$G
#
# create new data frame with season totals for each league
LG_RPG <- aggregate(cbind(R, RA, G) ~ yearID + lgID, data = Teams_sub, sum)
# calculate league + season runs and runs allowed per game
LG_RPG$LG_RPG <- LG_RPG$R / LG_RPG$G
LG_RPG$LG_RAPG <- LG_RPG$RA / LG_RPG$G
# create new data frame with season totals for each league
LG_RPG <- aggregate(cbind(R, RA, G) ~ yearID + lgID, data = Teams_sub, sum)
# calculate league + season runs and runs allowed per game
LG_RPG$LG_RPG <- LG_RPG$R / LG_RPG$G
LG_RPG$LG_RAPG <- LG_RPG$RA / LG_RPG$G
head(LG_RPG)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(R, RA, G)
head(LG_RPG_dplyr)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(sum(R, RA, G))
head(LG_RPG_dplyr)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(sum(R), sum(RA), sum(G))
head(LG_RPG_dplyr)
head(LG_RPG)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(sum(R), sum(RA), sum(G)) %>%
mutate((LG_RPG = R/G), (LG_RAPG = RA/G))
head(LG_RPG_dplyr)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(sum(R), sum(RA), sum(G)) %>%
mutate((LG_RPG = sum(R)/sum(G), (LG_RAPG = sum(RA)/sum(G)))
head(LG_RPG_dplyr)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(sum(R), sum(RA), sum(G)) %>%
mutate(LG_RPG = sum(R)/sum(G))
head(LG_RPG_dplyr)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(sum(R), sum(RA), sum(G)) %>%
mutate(RPG = sum(R)/sum(G))
head(LG_RPG_dplyr)
# dplyr approach to creating LG_RPG
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(sum(R), sum(RA), sum(G)) %>%
mutate(RPG = R/G)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(sum(R), sum(RA), sum(G))
head(LG_RPG_dplyr)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(runs=sum(R), runsallowed=sum(RA), games=sum(G))
head(LG_RPG_dplyr)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(runs=sum(R), runsallowed=sum(RA), games=sum(G)) %>%
mutate(RPG=runs/games, RAPG=runsallowed/games)
head(LG_RPG_dplyr)
head(LG_RPG)
LG_RPG_dplyr <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(R=sum(R), RA=sum(RA), G=sum(G)) %>%
mutate(RPG=R/G, RAPG=RA/G)
head(LG_RPG_dplyr)
head(LG_RPG)
# package load
library(shiny)
library(dplyr)
library(ggplot2)
library(Lahman)
data(Teams)
data(Teams)
data(Teams)
Teams %>%
filter(franchID == "CHC") %>%
(franchID, names)
Teams %>%
filter(franchID == "CHC")
Teams %>%
filter(franchID == "CHC") %>%
group_by(name)
CHCdata <- Teams %>%
filter(franchID == "CHC") %>%
group_by(name)
View(CHCdata)
Teams %>%
filter(franchID == "CHC", yearID == 1901)
Teams %>%
filter(franchID == "CHW", yearID == 1901)
Teams %>%
filter(franchID == "CHW", yearID == 2013)
Teams %>%
filter(franchID == "NYY", yearID == 2013)
# package load
library(shiny)
library(dplyr)
library(ggplot2)
library(Lahman)
# load the Lahman data table "Teams", filter
data(Teams)
Teams %>%
filter(franchID == "", yearID == 2013)
Teams %>%
filter(franchID == "", yearID == 2013) %>%
select(yearID, lgID, teamID, franchID, name)
Teams %>%
filter(franchID == "", yearID == 2013) %>%
select(yearID, lgID, teamID, franchID, name)
Teams %>%
filter(franchID == "", yearID == 2013)
Teams %>%
filter(franchID == "CHN", yearID == 2013) %>%
select(yearID, lgID, teamID, franchID, name)
Teams %>%
filter(franchID == "CHN", yearID == 2013)
Teams %>%
filter(franchID == "CHC", yearID == 2013) %>%
select(yearID, lgID, teamID, franchID, name)
Teams %>%
filter(franchID == "CHC", yearID == 2013) %>%
select(yearID, lgID, teamID, franchID, name, G, W, L)
Teams %>%
filter(franchID == "CHC" | "CHW", yearID == 2013) %>%
select(yearID, lgID, teamID, franchID, name, G, W, L)
Teams %>%
filter(franchID == "CHC" | franchID == "CHW", yearID == 2013) %>%
select(yearID, lgID, teamID, franchID, name, G, W, L)
# package load
library(shiny)
library(dplyr)
library(ggplot2)
library(Lahman)
# load the Lahman data table "Teams", filter
data(Teams)
Teams %>%
filter(franchID == "CHC" | franchID == "CHW", yearID == 2013) %>%
select(yearID, lgID, teamID, franchID, name, G, W, L)
Teams %>%
filter(franchID == "CHC" | franchID == "CHW", yearID == 2013) %>%
select(yearID, lgID, teamID, franchID, name, G, W, L, R, RA)
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.03')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
# package load
library(shiny)
library(dplyr)
library(reshape)
library(ggplot2)
#
library(Lahman)
# package load
library(shiny)
library(dplyr)
library(reshape)
library(ggplot2)
#
library(Lahman)
# load the Lahman data table "Teams", filter
data(Teams)
LG_RPG <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID, lgID) %>%
summarise(R=sum(R), RA=sum(RA), G=sum(G)) %>%
mutate(leagueRPG=R/G, leagueRAPG=RA/G)
# and a version with just the MLB totals
MLB_RPG <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
group_by(yearID) %>%
summarise(R=sum(R), RA=sum(RA), G=sum(G)) %>%
mutate(leagueRPG=R/G, leagueRAPG=RA/G)
#
# define the year limits of the data set
firstyear <- MLB_RPG$yearID[1]
mostrecentyear <- tail(MLB_RPG$yearID, 1)
#
Teams.merge <-  Teams %>%
mutate(teamRPG=(R/G), teamRAPG=(RA/G))
Teams.merge <-
merge(Teams.merge, LG_RPG, by = c("yearID", "lgID"))
#
Teams.merge <- Teams.merge %>%
# runs scored index where 100=the league average for that season
mutate(R_index = (teamRPG/leagueRPG)*100) %>%
mutate(R_index.sd = sd(R_index)) %>%
mutate(R_z = (R_index - 100)/R_index.sd) %>%
# runs allowed
mutate(RA_index = (teamRAPG/leagueRAPG)*100) %>%
mutate(RA_index.sd = sd(RA_index)) %>%
mutate(RA_z = (RA_index - 100)/RA_index.sd)
#
TeamNames <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
distinct(franchID) %>%
select(franchID) %>%
arrange(franchID)
TeamNameList <- TeamNames$franchID
#
Team1 <- filter(Teams.merge, franchID == "input$TeamName"ANA")
Team1 <- filter(Teams.merge, franchID == "ANA")
firstteamyear <- Team1$yearID[1]
lastteamyear <- tail(Team1$yearID, 1)
Team2 <- Team1 %>%
select(yearID, teamID, R_index, RA_index) %>%
melt(id=c("yearID", "teamID"))
)
Team2 <- Team1 %>%
select(yearID, teamID, R_index, RA_index) %>%
melt(id=c("yearID", "teamID"))
View(Team2)
View(Team2)
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
shiny::runApp('~/RStats/MLBrunscoring_shiny_TEST_2015-01-04.04')
install.packages("J:/R_the software/SlidifyLibrary/slidifyLibraries_0.3.1.tar.gz", repos = NULL, type = "source")
library(devtools)
install_github("slidify", "ramnathv")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
shiny::runApp('~/RStats/shinyapps_tabletest2')
View(Teams)
install.packages(c("dplyr", "knitr", "magrittr", "RColorBrewer", "reshape2", "rmarkdown", "rstudioapi", "shiny"))
library(shiny)
library(ggplot2)
runApp(list(
ui = fluidPage(downloadButton('foo')),
server = function(input, output) {
plotInput = function() {
qplot(speed, dist, data = cars)
}
output$foo = downloadHandler(
filename = 'test.png',
content = function(file) {
device <- function(..., width, height) {
grDevices::png(..., width = width, height = height,
res = 300, units = "in")
}
ggsave(file, plot = plotInput(), device = device)
})
}
))
library(Lahman)
load("C:/Users/Martin_ACER_Win7/Downloads/SeriesPost.RData")
View(SeriesPost)
setwd("~/GitHub/Lahman_package_rstats/SeriesPost")
setwd("~/GitHub/Lahman_package_rstats/SeriesPost")
library(Lahman)
data(SeriesPost)
head(SeriesPost)
library(dplyr)
ws_winner_table <- SeriesPost %>%
mutate(teamIDwinner = as.character (teamIDwinner)) %>%
filter(yearID > "1902", round == "WS") %>%
group_by(teamIDwinner) %>%
summarise(wincount = n()) %>%
arrange(desc(wincount))
ws_winner_table
#
# Create table of current franchises
data("TeamsFranchises")
active_teams <- TeamsFranchises %>%
subset(active == "Y") %>%
mutate(franchID = as.character(franchID)) %>%
select(franchID, franchName)
active_teams
#
# create a list of the team names
data("Teams")
team_names <- Teams %>%
filter(yearID > 1900, lgID != "FL") %>%
mutate(teamID = as.character(teamID)) %>%
mutate(franchID = as.character(franchID)) %>%
select(yearID, teamID, franchID, name) %>%
distinct(teamID)
# add franchiseName from active_teams to team_names
team_names <- inner_join(team_names, active_teams, "franchID")
team_names
#
# add franchiseName to ws_winnertable
ws_winner_table2 <- ws_winner_table %>%
full_join(team_names, by= c("teamIDwinner" = "teamID"))
ws_winner_table2
# produce a summary table based on franchise name
# deal with the fact that some teams (note: not franchises!) have not won the World Series, and the 'wincount' variable in the table 'ws_winnertable' is an NA value
ws_winner_table3 <- ws_winner_table2 %>%
filter(!is.na(wincount))
ws_winner_table4 <- ws_winner_table3 %>%
group_by(franchID) %>%
summarise(wincount = sum(wincount)) %>%
arrange(desc(wincount))
ws_winner_table4
# variant with 'franchName'
ws_winner_table4a <- ws_winner_table3 %>%
group_by(franchName) %>%
summarise(wincount = sum(wincount)) %>%
arrange(desc(wincount))
ws_winner_table4a
str(ws_winner_table4a)
# add the wincount back into the active_teams list
ws_winner_table5 <- active_teams %>%
left_join(ws_winner_table4, by = "franchID") %>%
arrange(desc(wincount)) %>%
select(franchName, franchID, wincount)
ws_winner_table5
data.frame(ws_winner_table)
ws_winner_table
library(dplyr)
ws_winner_table <- SeriesPost %>%
mutate(teamIDwinner = as.character (teamIDwinner)) %>%
filter(yearID > "1902", round == "WS") %>%
group_by(teamIDwinner) %>%
summarise(wincount = n()) %>%
arrange(desc(wincount))
ws_winner_table
data.frame(ws_winner_table)
ws_winner_table <- SeriesPost %>%
mutate(teamIDwinner = as.character (teamIDwinner)) %>%
filter(yearID > "1902", round == "WS") %>%
group_by(teamIDwinner) %>%
summarise(wincount = n()) %>%
arrange(desc(wincount))
ws_winner_table
